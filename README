Q. Given a maze , source , destination . find path. L R U D (left , right ,up , down).

0 = walls
1 = free

0 0 1 0 0 0 0 0  
1 1 1 1 1 1 1 1  
1 0 0 0 0 1 0 1  
1 1 1 0 1 1 0 1  
1 0 1 0 1 0 0 1  
1 1 1 1 1 0 1 1  
0 0 0 0 1 0 0 0  
1 0 1 0 1 0 0 1  
1 1 1 1 1 1 1 1  
0 0 0 0 0 0 1 0  

source = (0 , 2)
dest = (9 , 6)

shortest path in term of L R D U.

sol : docs/back.cpp
D R R R D D L D D D D D R R D

Current (hard coded)
it only works for 1 testcase 10x10 pixel (tiny.png). output = (out.png)
./run.sh < docs/in


in-order to make it run for every case.
- change code in bfs(n & m)
- change in file.(it contain every pixel of image).
- change code maze.py


ignore
git config credential.helper 'cache --timeout=243600'

